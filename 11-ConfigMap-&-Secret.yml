
########################################################################################
# ----  T G LEC-53                     - C O N F I G M A P -  
########################################################################################

# ConfigMap:- A ConfigMap is an API object used to store non-confidential data in key-value pairs. 
#             Pods can consume ConfigMaps as environment variables, command-line arguments, or as configuration files in a volume.
#             A ConfigMap allows you to decouple environment-specific configuration from your container images, 
#             so that your applications are easily portable.

#             we can define data(configuration) in a 'key value pair' or a 'file content' using ConfigMap.
#             we can refer ConfigMap key value pairs in a pod manifest environment vars.Or we can mount ConfigMap
#             file(data) as a volume to our pods.
#             ConfigMap in k8s will maintain data in a human readale format.

# secret:- A Secret is an object that contains a small amount of sensitive data such as a password, a token, or a key. 
#          Such information might otherwise be put in a Pod specification or in a container image.
#          Using a Secret means that you don't need to include confidential data in your application code.
#          Secret is basically its Namespace oriented. 
#          Store stores sensitive information like key/value pairs or it stores some password or even you want to encrypt the tls certificat even you want to encrypt files.
#          secret always stores the info by incoding into base64.

#....................................................................................................................................
#                                           --  CONFIGMAP  --

#               1st make  configuration file.            [ sample.conf ]
#               kubectl create configmap mymap --from-file=sample.conf        

###################        AS A VOLUME ---------------------------
##  vi deployconfig.yml

--- # create pod for configmap  [AS A VOLUME]
apiVersion: v1
kind: Pod
metadata:
  name: myvolconfig    # ---- NAME 0f cm / CONFIGMAP
spec:
  containers:
  - name: c1
    image: centos
    command: ["/bin/bash", "-c", "while true; do echo HELLo-AAMIR; sleep 5 ; done"]
    volumeMounts:  #---- make volume
      - name: testconfigmap   ####---- SAME
        mountPath: "/tmp/config"   # the config files will be mounted as ReadOnly by default here
  volumes:
  - name: testconfigmap     ####---- SAME
    configMap:    # ----- ''CONFIG MAP''   object
       name: mymap   # this should match the config map name created in the first step  ( sample.conf  )
       items:
       - key: sample.conf
         path: sample.conf
...

#................................,,,,,,,,,,
#USE CASE OF CONFIGMAP by RAJESH :---------
#................................,,,,,,,,,,

# vi index.html
# <h1> Welcome to kubernetes sessions </h1>

# cat index.html     ----->      <h1> Welcome to kubernetes sessions </h1>

# NOTE :-- Create secret 
#  kubectl create secret generic indexsecret --from-file=index.html=./index.html        ( seret/indexsecet created.)

# kubectl get secret 

# kubectl describe secret indexsecret

# kubectl edit secret indexsecret


# vi nginx-indexsecret.yml
--- # 
kind: Deployment   # ------ Deployment 'object'
apiVersion: apps/v1
metadata:
   name: nginx     # -------- Name of ''Deployment''
   labels:
     app: nginx # ------- same
spec:
   replicas: 2
   selector:
     matchLabels:
       app:  nginx   # ------- same
   template:
     metadata:
       labels:
         app: nginx    # ------- same
     spec:
       volumes:
         - name: myvol # ------- same
           secret:
             secretName: indexsecret   # ----- we create secret 
       containers:
         - name: nginx-containers
           image: nginx
           volumeMounts:   # ---- hm volume ko container ke andr mount kr rahe.
            - name: myvol # ------- same
              mountPath: /usr/share/nginx/html            # /usr/share/nginx/html  <----- default path of nginx
              ReadOnly: yes
...

# kubectl apply -f nginx-indexsecret.yml

# kubectl get pod -o wide 

# kubectl describe pods nginx-4673gdhegr7-kjn870   { not be able to see what is ther inside the index.html } /usr/share/nginx/html from 'myvol' (ro)

# curl 10.44.0.8
# RESULT ----> <h1> Welcome to kubernetes sessions </h1>



####################          AS A ENVIRONMENT VARIABLE ----------------------

##  vi deployenv.yml

--- # create pod for configmap  [ENVIRONMENT VARIABLE]
apiVersion: v1
kind: Pod
metadata:
  name: myenvconfig
spec:
  containers:
  - name: c1
    image: centos
    command: ["/bin/bash", "-c", "while true; do echo HELLo-AAMIR; sleep 5 ; done"]
    env:    # ------- declere ENV variabble 
    - name: MYENV         # --- env name in which value of the key is stored
      valueFrom:
        configMapKeyRef:  # ---- refrence config map key 
          name: mymap      # name of the config created
          key: sample.conf # ----- take this file  and run on the container 

#....................................................................................................................................



















#----------------------------------------------------------------------------------------------------

#                                 - S E C R E T -   ( for all secret  file to hide)

#       Note :: Create file for username or password:

#       echo "root"  >  username.txt;   echo "mypassword123"  >  password.txt

#    Now hide file ::--- 

#    kubectl create secret generic mysecret --from-file=username.txt --from-file=password.txt





##   vi deploysecret.yml               
---
apiVersion: v1
kind: Pod
metadata:
  name: myvolsecret
spec:
  containers:
  - name: c1
    image: centos
    command: ["/bin/bash", "-c", "while true; do echo Hello-AAMIR; sleep 5 ; done"]
    volumeMounts:  # ------  mount volume
      - name: testsecret #---same
        mountPath: "/tmp/mysecrets"   # the secret files will be mounted as ReadOnly by default here. { /tmp/mysecrets} directpory
  volumes:  # ---- make volume 
  - name: testsecret     #---same  # ----create volume name is 'testsecret'
    secret:
       secretName: mysecret  # ----- take this file ( ye utha ke lana hai )
...     



#.................................................................................................................
#               ( this is not correct way to mention PASSWORD in yml file . thats why we use secret )

# vi mysql-deployment.yml

--- # Deployment  type= Recreate For:myql with password
kind: Deployment   # ------ Deployment 'object'
apiVersion: apps/v1
metadata:
   name: mysql     # -------- Name of ''Deployment''
   labels:
     app: mysql # ------- same
spec:
   selector:
     matchLabels:
       app: mysql    # ------- same
       tier: mysql
   strategy:
     type: Recreate    # --- all pod down and New create at same time.
   template:
     metadata:
       labels:
         app: mysql    # ------- same
         tier: mysql
     spec:
       containers:
         - name: mysql
           image: mysql:5.6
           env:  # ----------- env parametor for MYSQL : permanant
             - name: MYSQL_ROOT_PASSWORD
               value: redhat   # ---- PASSWORD   ( can easily read it , this is not secret )
           ports:
             - containerPort: 3306
               name: mysql
...   

# kubectl apply -f mysql-deployment.yml

# kubectl get all -o wide

# kubectl describe pod mysql-3725665823523-km6c4              ( it shows passowrd )    MYSQL_ROOT_PASSWORD: redhat 

# kubectl delete -f mysql-deployment.yml        


# NOTE ---->  we will try to create genric secret for password...



# kubectl create secret genric mysqlsecret --from-literal=password=redhat                            ( --from-literal=key=value )
# RESULT -----> secret/mysqlsecretct created.

# vi mysql-secret.yml

--- # Deployment  type= Recreate For:secret
kind: Deployment   # ------ Deployment 'object'
apiVersion: apps/v1
metadata:
   name: mysql     # -------- Name of ''Deployment''
   labels:
     app: mysql # ------- same
spec:
   selector:
     matchLabels:
       app: mysql    # ------- same
       tier: mysql
   strategy:
     type: Recreate    # --- all pod down and New create at same time.
   template:
     metadata:
       labels:
         app: mysql    # ------- same
         tier: mysql
     spec:
       containers:
         - name: mysql
           image: mysql:5.6
           env:  # ----------- env parametor for MYSQL : permanant
             - name: MYSQL_ROOT_PASSWORD
               valueFrom:   #.-.-.-.-.-.-.-.-.-.-.-.- instead of using actual password we use
                 secretKeyRef:
                   name: mysqlsecretct 
                   key: password
... 





 






